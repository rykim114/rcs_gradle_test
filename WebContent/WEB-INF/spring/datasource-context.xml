<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util.xsd">


	<bean id="encryptorConfig" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
	    <property name="algorithm" value="PBEWithMD5AndDES" />
	    <property name="password" value="ezremsdbpwenckey" />
	</bean>
	 
	<bean id="encryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
	    <property name="config" ref="encryptorConfig" />
	</bean>
	 
	<bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
	    <constructor-arg ref="encryptor" />
	    <property name="locations">
	        <list>
	            <value>/WEB-INF/config/jdbc.properties</value>
	        </list>
	    </property>
	</bean>
	
	<!-- ============================================================= -->
	<!--  DataAccess  Properties                                       -->
	<!-- ============================================================= -->
	<!-- <context:property-placeholder location="/WEB-INF/config/jdbc.properties" /> -->

	<!-- ============================================================= -->
	<!--  DBCP DataSource Config Setting                               -->
	<!-- ============================================================= -->

<!-- 		
  	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close"> 
		<property name="driverClassName" value="${ezREMS_db1.driver}" /> 
		<property name="url" value="${ezREMS_db1.url}" /> 
		<property name="username" value="${ezREMS_db1.username}" /> 
		<property name="password" value="${ezREMS_db1.password}" /> 
		<property name="initialSize" value="5" />
		<property name="maxActive" value="50" /> 
		<property name="maxIdle" value="50" /> 
		<property name="minIdle" value="20" /> 
		<property name="maxWait" value="2000" /> 
		
		<property name="validationQuery" value="select 1"/> 
		<property name="testOnBorrow" value="true" />
	</bean>
-->

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="connectionTestQuery" value="SELECT 1" />
		<property name="dataSourceClassName" value="${ezREMS_db1.datasource}" />
		<property name="maximumPoolSize" value="10" />
		<property name="minimumIdle" value="1" />
		<property name="idleTimeout" value="10000" />
		
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${ezREMS_db1.url}</prop>
				<prop key="user">${ezREMS_db1.username}</prop>
				<prop key="password">${ezREMS_db1.password}</prop>
			</props>
		</property>
	</bean>

	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
<!--  	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" >
		<property name="jndiName" value="java:/jdbc/OneJNDI" />
	</bean> -->
	
   <!-- select start  -->
<!--
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
			p:configLocation="/WEB-INF/config/mybatis_config.xml"
			p:dataSource-ref="dataSource">
		<property name="mapperLocations">
			<list>
				<value>classpath*:apps/framework/dao/**/*.xml</value>
				<value>classpath*:apps/project/dao/**/*.xml</value>
			</list>
		</property>
	</bean>
-->

<!-- 20180327 추가: 쿼리 리로딩 객체, 개발/테스트 전용 -->
 	<bean id="sqlSessionFactory" class="apps.framework.utils.dao.RefreshableSqlSessionFactoryBean"
			p:configLocation="/WEB-INF/config/mybatis_config.xml"
			p:dataSource-ref="dataSource">
		<property name="mapperLocations">
			<list>
				<value>classpath*:apps/framework/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/admin/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/common/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/front/dao/**/*.xml</value>
			</list>
		</property>
	</bean>


	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<constructor-arg name="executorType" value="REUSE"/>
	</bean>
	
	<bean id="cmDao" class="apps.framework.dao.CmDao" 
			p:sqlSessionFactory-ref="sqlSessionFactory"
			p:sqlSessionTemplate-ref="sqlSessionTemplate" />
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*"    read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceTransactionMethod" expression="execution(public * *..*.service.*..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceTransactionMethod" />
	</aop:config>
	
	<!-- select end -->
<!-- 	
	 <bean id="dataSource_Oracle" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close"> 
		<property name="driverClassName" value="${ezREMS_db2.driver}" /> 
		<property name="url" value="${ezREMS_db2.url}" /> 
		<property name="username" value="${ezREMS_db2.username}" /> 
		<property name="password" value="${ezREMS_db2.password}" /> 
		
		<property name="validationQuery" value="select 1"/> 
		<property name="testOnBorrow" value="true" />
	</bean>
-->	

	<bean id="hikariConfig_Oracle" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP_Oracle" />
		<property name="connectionTestQuery" value="SELECT 1" />
		<property name="dataSourceClassName" value="${ezREMS_db2.datasource}" />
		<property name="maximumPoolSize" value="10" />
		<property name="minimumIdle" value="1" />
		<property name="idleTimeout" value="10000" />
		
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${ezREMS_db2.url}</prop>
				<prop key="user">${ezREMS_db2.username}</prop>
				<prop key="password">${ezREMS_db2.password}</prop>
			</props>
		</property>
	</bean>

	<bean id="dataSource_Oracle" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig_Oracle" />
	</bean>	
	
	<!-- 20180327 추가: 쿼리 리로딩 객체, 개발/테스트 전용 -->
	<bean id="sqlSessionFactory_Oracle" class="org.mybatis.spring.SqlSessionFactoryBean"
			p:configLocation="/WEB-INF/config/mybatis_config.xml"
			p:dataSource-ref="dataSource_Oracle">
		<property name="mapperLocations">
			<list>
				<value>classpath*:apps/framework/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/admin/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/common/dao/**/*.xml</value>
				<value>classpath*:apps/homepage/front/dao/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate_Oracle" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory_Oracle"/>
		<constructor-arg name="executorType" value="REUSE"/>
	</bean>
	
	<bean id="cmOracleDao" class="apps.framework.dao.CmOracleDao" 
			p:sqlSessionFactory-ref="sqlSessionFactory_Oracle"
			p:sqlSessionTemplate-ref="sqlSessionTemplate_Oracle" />
	
	<bean id="transactionManager_Oracle" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource_Oracle" />

	<tx:advice id="txAdvice_Oracle" transaction-manager="transactionManager_Oracle">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*"    read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceTransactionMethod_Oracle" expression="execution(public * *..*.service.*..*(..))" />
		<aop:advisor advice-ref="txAdvice_Oracle" pointcut-ref="serviceTransactionMethod_Oracle" />
	</aop:config>
	
	
	
	<!-- Ajax Json View Start -->
	<bean id="ajaxMainView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />

	<task:annotation-driven proxy-target-class="true"/>
	<!-- <task:annotation-driven executor="gsTaskExecutor" scheduler="gsScheduler"/>
	<task:scheduler id="gsScheduler" pool-size="20" />
    <task:executor id="gsTaskExecutor" pool-size="10"/>    
 	<bean id="gsrBatchComponent" class="apps.project.batch.TaskBatch" /> -->
 	
    <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient" />
    
	<!-- <context:component-scan base-package="apps.project.controller" /> -->
	<mvc:annotation-driven />
	
<!-- 	<bean id="logInOutDao" class="apps.project.dao.member.LogInOutDao" />
	
	 -->
	 <!-- <bean id="egovReceiptProcessVO" class="apps.project.object.EgovReceiptProcessVO" /> -->
	 
	
	<!-- Alternate method to enable @Autowired -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
 	<!-- Already implied by component-scan AND annotation-config -->
 		
 	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"> 
		<property name="cacheManager" ref="ehcache"/> 
	</bean> 
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> 
		<property name="configLocation" value="/WEB-INF/config/ehcache.xml"/>
		<property name="shared" value="true"/> 
	</bean>


    
    
</beans>
